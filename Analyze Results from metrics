/* Use the order_binary metric from the previous exercise,
count the number of users per treatment group for test_id = 7, 
and count the number of users with orders (for test_id 7) */

SELECT 
  COUNT(user_id)                      AS users,
  SUM(orders_after_assignment_binary) AS orders_completed,
  test_assignment 
FROM 
  (SELECT 
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id,
    MAX(CASE WHEN orders.created_at > test_events.event_time THEN 1 
    ELSE 0 
    END) AS orders_after_assignment_binary
  FROM 
    (SELECT 
      event_id,
      event_time,
      user_id,
      platform,
      MAX(CASE WHEN parameter_name = 'test_id'
          THEN CAST (parameter_value AS INT)
          ELSE NULL 
          END) AS test_id,
      MAX(CASE WHEN parameter_name = 'test_assignment'
          THEN parameter_value
          ELSE NULL
          END) AS test_assignment
    FROM 
      dsv1069.events 
    WHERE 
      event_name = 'test_assignment'
    GROUP BY 
      event_id,
      event_time,
      user_id,
      platform
    ) test_events
  LEFT JOIN 
    dsv1069.orders
  ON 
    orders.user_id = test_events.user_id
  GROUP BY
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id
    ) users
WHERE 
  test_id = 7  
GROUP BY 
  test_assignment


/*  Create a new tem view binary metric. 
Count the number of users per treatment group,
and count the number of users with views (for test_id 7) */

SELECT 
  COUNT(user_id)    AS users,
  SUM(views_binary) AS views_binary,
  test_assignment 
FROM 
  (SELECT 
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id,
    MAX(CASE WHEN views.event_time > test_events.event_time THEN 1 ELSE 0 
    END) AS views_binary
  FROM 
    (SELECT 
      event_id,
      event_time,
      user_id,
      platform,
      MAX(CASE WHEN parameter_name = 'test_id'
          THEN CAST (parameter_value AS INT)
          ELSE NULL 
          END) AS test_id,
      MAX(CASE WHEN parameter_name = 'test_assignment'
          THEN parameter_value
          ELSE NULL
          END) AS test_assignment
    FROM 
      dsv1069.events 
    WHERE 
      event_name = 'test_assignment'
    GROUP BY 
      event_id,
      event_time,
      user_id,
      platform
    ) test_events
  LEFT JOIN 
   (
   SELECT
    *
   FROM
    dsv1069.events 
   WHERE 
    event_name = 'view_item'
   ) views
  ON 
    views.user_id = test_events.user_id
  GROUP BY
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id
    ) users
WHERE 
  test_id = 7  
GROUP BY 
  test_assignment

/* Alter the result from previuos code, to compute the users who viewed an item WITHIN 30 days of their treatment event */

SELECT 
  COUNT(user_id)    AS users,
  SUM(views_binary) AS views_binary,
  views_binary_30d
  test_assignment 
FROM 
  (SELECT 
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id,
    MAX(CASE WHEN views.event_time > test_events.event_time THEN 1 ELSE 0 
    END) AS views_binary,
    MAX(CASE WHEN (views.event_time > test_events.event_time AND
                  DATE_PART('day', views.event_time - test_events.event_time) <= 30)  
                  THEN 1 ELSE 0 
    END) AS views_binary_30d
  FROM 
    (SELECT 
      event_id,
      event_time,
      user_id,
      platform,
      MAX(CASE WHEN parameter_name = 'test_id'
          THEN CAST (parameter_value AS INT)
          ELSE NULL 
          END) AS test_id,
      MAX(CASE WHEN parameter_name = 'test_assignment'
          THEN parameter_value
          ELSE NULL
          END) AS test_assignment
    FROM 
      dsv1069.events 
    WHERE 
      event_name = 'test_assignment'
    GROUP BY 
      event_id,
      event_time,
      user_id,
      platform
    ) test_events
  LEFT JOIN 
   (
   SELECT
    *
   FROM
    dsv1069.events 
   WHERE 
    event_name = 'view_item'
   ) views
  ON 
    views.user_id = test_events.user_id
  GROUP BY
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id
    ) users
WHERE 
  test_id = 7  
GROUP BY 
  test_assignment,
  views_binary_30d

/* Create the metric invoices (this is a mean metric, not a binary metric) and for test_id = 7
----The count of users per treatment group 
----The average value of the metric per treatment group 
----The standard deviation of the metric per treatment group */

SELECT 
  test_id,
  test_assignment,
  COUNT(user_id)   AS users,
  AVG(invoices)    AS avg_invoices,
  STDDEV(invoices) AS stddev_invoices
FROM
  (SELECT 
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id,
    COUNT(DISTINCT (CASE WHEN orders.created_at > test_events.event_time THEN invoice_id ELSE NULL END))
      AS invoices,
    COUNT(DISTINCT (CASE WHEN orders.created_at > test_events.event_time THEN line_item_id ELSE NULL END))
      AS items_after_assignment,
    SUM(CASE WHEN orders.created_at > test_events.event_time THEN price ELSE 0 END)
      AS total_revenue
  FROM 
    (SELECT 
      event_id,
      event_time,
      user_id,
      platform,
      MAX(CASE WHEN parameter_name = 'test_id'
          THEN CAST (parameter_value AS INT)
          ELSE NULL 
          END) AS test_id,
      MAX(CASE WHEN parameter_name = 'test_assignment'
          THEN parameter_value
          ELSE NULL
          END) test_assignment
    FROM 
      dsv1069.events 
    WHERE 
      event_name = 'test_assignment'
    GROUP BY 
      event_id,
      event_time,
      user_id,
      platform
    ) AS test_events
  LEFT JOIN 
    dsv1069.orders
  ON 
    orders.user_id = test_events.user_id
  GROUP BY
    test_events.test_id,
    test_events.test_assignment, 
    test_events.user_id
) mean_metrics
GROUP BY 
  test_id,
  test_assignment
ORDER BY
  test_id
